{"version":3,"sources":["assets/icons/44.svg","style/app/background.js","style/weather/container.js","style/weather/content.js","style/weather/containerinput.js","style/weather/info.js","style/weather/contentinfo.js","style/weather/icon.js","style/weather/tomorrow.js","style/weather/status.js","api/getweather.js","components/weather/index.js","App.js","serviceWorker.js","style/global.js","index.js"],"names":["module","exports","Background","styled","div","props","img","Weather","colors","css","celsius","color","Content","ContainerInput","Info","ContentInfo","Icon","Tomorrow","tomorrow","Status","GetWeather","city","initCity","useState","weather","setWeather","getWeather","useCallback","a","async","axios","get","data","console","log","useEffect","getCity","lat","long","temp","status","state","setState","useWeather","getLocation","results","components","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","parseInt","list","main","changeTemp","index","iconweather","icon","statusDay","description","src","iconInput","alt","value","placeholder","onChange","e","target","type","onClick","data-testid","title","wind","speed","humidity","pressure","App","setImg","images","url","dataBackground","Boolean","window","location","hostname","match","Global","createGlobalStyle","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3509fa75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/44.d475c1ec.svg\";","import styled from 'styled-components';\n\nconst Background = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100vh;\n    background-image: url('${props => props.img}');\n`;\n\nexport default Background;\n","import styled from 'styled-components';\n\nconst Weather = styled.div`\n    width: 500px;\n    max-width: 500px;\n    height: 500px;\n\n    @media (max-width: 540px) {\n        width: 100%;\n        margin: 0 5%;\n    }\n`;\n\nexport default Weather;\n","/* eslint-disable no-nested-ternary */\nimport styled, { css } from 'styled-components';\n\nconst colors = css`\n    background-color: ${props =>\n        props.celsius\n            ? props.color >= 15 && props.color <= 35\n                ? 'rgba(252, 205, 5, 0.8)'\n                : props.color < 15\n                ? 'rgba(0, 96, 209, 0.8)'\n                : 'rgba(215, 46, 17, 0.8)'\n            : 1.8 * props.color + 32 >= 15 && 1.8 * props.color + 32 <= 35\n            ? 'rgba(252, 205, 5, 0.8)'\n            : 1.8 * props.color + 32 < 15\n            ? 'rgba(0, 96, 209, 0.8)'\n            : 'rgba(215, 46, 17, 0.8)'};\n`;\n\nconst Content = styled.div`\n    position: relative;\n    display: flex;\n    width: 100%;\n    height: calc(100% - 45px);\n    ${colors};\n`;\n\nexport default Content;\n","import styled from 'styled-components';\n\nconst ContainerInput = styled.div`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 45px;\n    background-color: #eee;\n    border: 0;\n    padding: 0 0 0 10px;\n\n    img {\n        width: 30px;\n        height: 30px;\n    }\n\n    input {\n        width: 90%;\n        height: 100%;\n        background-color: transparent;\n        border: 0;\n        padding: 0 10px;\n        font-size: 18px;\n        font-weight: bold;\n    }\n\n    button {\n        cursor: pointer;\n        height: 100%;\n        border: 0;\n        padding: 0 10px;\n        font-weight: bold;\n    }\n`;\n\nexport default ContainerInput;\n","import styled from 'styled-components';\n\nconst Info = styled.div`\n    width: 40%;\n    height: 100%;\n`;\n\nexport default Info;\n","import styled from 'styled-components';\n\nconst ContentInfo = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n    color: #fff;\n    margin: 15px 0 30px;\n\n    h3 {\n        width: 100%;\n        text-align: left;\n        margin-bottom: 5px;\n    }\n\n    p {\n        width: 100%;\n        text-align: left;\n    }\n\n    button {\n        width: 100%;\n        border: 0;\n        color: #fff;\n        background-color: transparent;\n        text-align: left;\n        font-size: 16px;\n        cursor: pointer;\n    }\n\n    @media (max-width: 540px) {\n        h3 {\n            font-size: 16px;\n        }\n        p {\n            font-size: 14px;\n        }\n        button {\n            font-size: 14px;\n        }\n    }\n`;\n\nexport default ContentInfo;\n","import styled from 'styled-components';\n\nconst Icon = styled.div`\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    width: 60%;\n    height: 100%;\n\n    img {\n        margin-top: 50px;\n    }\n\n    @media (max-width: 540px) {\n        width: 50%;\n    }\n`;\n\nexport default Icon;\n","/* eslint-disable no-nested-ternary */\nimport styled, { css } from 'styled-components';\n\nconst colors = css`\n    background-color: ${props =>\n        props.celsius\n            ? props.color >= 15 && props.color <= 35\n                ? '#fccd05'\n                : props.color < 15\n                ? '#0060D1'\n                : '#D72E11'\n            : 1.8 * props.color + 32 >= 15 && 1.8 * props.color + 32 <= 35\n            ? '#fccd05'\n            : 1.8 * props.color + 32 < 15\n            ? '#0060D1'\n            : '#D72E11'};\n`;\n\nconst Tomorrow = styled.div`\n    width: 100%;\n    height: 70px;\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    flex-direction: column;\n    position: absolute;\n    left: 0;\n    bottom: ${props => (props.tomorrow ? '70px' : '0')};\n    ${colors};\n    color: #fff;\n\n    div {\n        width: 40%;\n\n        button {\n            cursor: pointer;\n            border: 0;\n            color: #fff;\n            background-color: transparent;\n            font-size: 16px;\n        }\n    }\n\n    @media (max-width: 540px) {\n        div {\n            width: 50%;\n            h3 {\n                font-size: 16px;\n            }\n            button {\n                font-size: 14px;\n            }\n        }\n    }\n`;\n\nexport default Tomorrow;\n","/* eslint-disable no-nested-ternary */\nimport styled from 'styled-components';\n\nconst Status = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    display: flex;\n    width: 100%;\n    height: calc(100% - 45px);\n    background-color: rgba(58, 56, 59, 0.8);\n\n    h1 {\n        color: #fff;\n        font-size: 18px;\n    }\n`;\n\nexport default Status;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nconst GetWeather = ({ city, initCity }) => {\n    const [weather, setWeather] = useState([]);\n\n    // Get Weather\n    const getWeather = useCallback(async () => {\n        try {\n            const data = await axios.get(\n                `https://api.openweathermap.org/data/2.5/forecast?q=${initCity ||\n                    city}&APPID=7ba73e0eb8efe773ed08bfd0627f07b8`\n            );\n\n            setWeather(data.data);\n        } catch (e) {\n            setWeather('Nenhum local encontrado!');\n            console.log(e);\n        }\n    }, [city, initCity]);\n\n    useEffect(() => {\n        if (initCity || city) {\n            getWeather();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [city, initCity]);\n\n    return weather;\n};\n\nexport default GetWeather;\n","/* eslint-disable no-return-assign */\n/* eslint-disable radix */\n/* eslint-disable import/no-dynamic-require */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\n// Images\nimport iconInput from '../../assets/icons/44.svg';\n\n// Styles\nimport Container from '../../style/weather/container';\nimport Content from '../../style/weather/content';\nimport ContainerInput from '../../style/weather/containerinput';\nimport Info from '../../style/weather/info';\nimport ContentInfo from '../../style/weather/contentinfo';\nimport Icon from '../../style/weather/icon';\nimport Tomorrow from '../../style/weather/tomorrow';\nimport Status from '../../style/weather/status';\n\n// API\nimport GetWeather from '../../api/getweather';\n\nconst Weather = () => {\n    const [state, setState] = useState({\n        weather: [],\n        initCity: '',\n        city: '',\n        getCity: '',\n        lat: '',\n        long: '',\n        celsius: [true, true, true],\n        temp: [],\n        status: 'Carregando...',\n    });\n    const useWeather = GetWeather({\n        city: state.city,\n        initCity: state.initCity,\n    });\n\n    // Get Location Init\n    const getLocation = useCallback(async () => {\n        try {\n            const data = await axios.get(\n                `https://api.opencagedata.com/geocode/v1/json?q=${state.lat},${state.long}&key=c63386b4f77e46de817bdf94f552cddf&language=en`\n            );\n            setState({\n                ...state,\n                initCity: data.data.results[0].components.city,\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }, [state]);\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(position => {\n            setState({\n                ...state,\n                lat: position.coords.latitude,\n                long: position.coords.longitude,\n            });\n            if (state.lat && state.long) {\n                getLocation();\n            }\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.lat, state.long]);\n\n    useEffect(() => {\n        if (state.initCity || useWeather) {\n            setState({\n                ...state,\n                weather: useWeather,\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.initCity, useWeather]);\n\n    useEffect(() => {\n        const convert = 273;\n\n        const temp = [\n            parseInt(\n                state.weather &&\n                    state.weather.list &&\n                    state.weather.list[0].main.temp - convert\n            ),\n            parseInt(\n                state.weather &&\n                    state.weather.list &&\n                    state.weather.list[1].main.temp - convert\n            ),\n            parseInt(\n                state.weather &&\n                    state.weather.list &&\n                    state.weather.list[2].main.temp - convert\n            ),\n        ];\n        setState({\n            ...state,\n            temp,\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.weather]);\n\n    const changeTemp = index => {\n        setState({\n            ...state,\n            ...(state.temp[index] = state.celsius[index]\n                ? (state.temp[index] - 32) / 1.8\n                : 1.8 * state.temp[index] + 32),\n            ...(state.celsius[index] = !state.celsius[index]),\n        });\n    };\n\n    const iconweather =\n        state.weather &&\n        state.weather.list &&\n        state.weather.list[0].weather[0].icon;\n\n    const statusDay =\n        state.weather &&\n        state.weather.list &&\n        state.weather.list[0].weather[0].description;\n\n    return (\n        <Container>\n            <ContainerInput>\n                <img src={iconInput} alt=\"input\" />\n                <input\n                    value={state.initCity || state.getCity}\n                    placeholder=\"Digite uma cidade\"\n                    onChange={e =>\n                        setState({\n                            ...state,\n                            initCity: '',\n                            getCity: e.target.value,\n                        })\n                    }\n                />\n                <button\n                    type=\"button\"\n                    onClick={() => {\n                        setState({ ...state, city: state.getCity });\n                    }}\n                >\n                    Pesquisar\n                </button>\n            </ContainerInput>\n            {/* Content Weather */}\n            {state.weather && state.weather.list ? (\n                <Content celsius={state.celsius[0]} color={state.temp[0]}>\n                    <Icon>\n                        <img\n                            src={`https://openweathermap.org/img/wn/${iconweather}@2x.png`}\n                            alt=\"Weather\"\n                        />\n                    </Icon>\n                    <Info>\n                        <ContentInfo>\n                            <h3>Hoje</h3>\n                            <button\n                                data-testid=\"convert\"\n                                type=\"button\"\n                                title={`${parseInt(state.temp[0])}${\n                                    state.celsius[0] ? 'Cº' : 'Fº'\n                                }`}\n                                onClick={() => changeTemp(0)}\n                            >\n                                {parseInt(state.temp[0])}\n                                {state.celsius[0] ? 'Cº' : 'Fº'}\n                            </button>\n                        </ContentInfo>\n                        <ContentInfo>\n                            <h3>\n                                {(statusDay === 'overcast clouds' &&\n                                    'Céu Nublado') ||\n                                    (statusDay === 'light rain' &&\n                                        'Chuva Fraca') ||\n                                    (statusDay === 'broken clouds' &&\n                                        'Céu com nuvens') ||\n                                    (statusDay === 'scattered clouds' &&\n                                        'Céu com poucas nuvens') ||\n                                    (statusDay === 'clear sky' &&\n                                        'Céu sem nuvens') ||\n                                    (statusDay === 'few clouds' &&\n                                        'Céu com poucas nuvens')}\n                            </h3>\n                            <p>\n                                Vento: NO {state.weather.list[0].wind.speed}\n                                km/h\n                            </p>\n                            <p>\n                                Humidade: {state.weather.list[0].main.humidity}%\n                            </p>\n                            <p>\n                                Pressão: {state.weather.list[0].main.pressure}\n                                hPA\n                            </p>\n                        </ContentInfo>\n                        <Tomorrow\n                            tomorrow\n                            celsius={state.celsius[1]}\n                            color={state.temp[1]}\n                        >\n                            <div>\n                                <h3>Amanhã</h3>\n                                <button\n                                    type=\"button\"\n                                    title={`${parseInt(state.temp[1])}${\n                                        state.celsius[1] ? 'Cº' : 'Fº'\n                                    }`}\n                                    onClick={() => changeTemp(1)}\n                                >\n                                    {parseInt(state.temp[1])}\n                                    {state.celsius[1] ? 'Cº' : 'Fº'}\n                                </button>\n                            </div>\n                        </Tomorrow>\n                        <Tomorrow\n                            celsius={state.celsius[2]}\n                            color={state.temp[2]}\n                        >\n                            <div>\n                                <h3>Depois de Amanhã</h3>\n                                <button\n                                    title={`${parseInt(state.temp[2])}${\n                                        state.celsius[2] ? 'Cº' : 'Fº'\n                                    }`}\n                                    type=\"button\"\n                                    onClick={() => changeTemp(2)}\n                                >\n                                    {parseInt(state.temp[2])}\n                                    {state.celsius[2] ? 'Cº' : 'Fº'}\n                                </button>\n                            </div>\n                        </Tomorrow>\n                    </Info>\n                </Content>\n            ) : (\n                <Status>\n                    <h1>\n                        {state.weather !== 'Nenhum local encontrado!'\n                            ? state.status\n                            : state.weather}\n                    </h1>\n                </Status>\n            )}\n        </Container>\n    );\n};\n\nexport default Weather;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Styles\nimport Background from './style/app/background';\n\n// Component\nimport Weather from './components/weather';\n\nconst App = () => {\n    const [img, setImg] = useState('');\n\n    const dataBackground = async () => {\n        try {\n            const data = await axios.get(\n                '/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=pt-BR'\n            );\n            setImg(data.data.images[0].url);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    useEffect(() => {\n        dataBackground();\n    }, []);\n\n    return (\n        <Background img={img}>\n            <Weather />\n        </Background>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nconst Global = createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        outline: none;\n        font-family: 'Poppins', sans-serif;\n    }\n\n    html, body, #root {\n        width: 100%;\n        height: 100vh;\n        min-height: 100vh;\n        overflow: hidden;\n    }\n`;\n\nexport default Global;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Global from './style/global';\n\nReactDOM.render(\n    <>\n        <App />\n        <Global />\n    </>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}